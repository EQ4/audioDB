# POSIX-COMPLIANT COMMAND LINE ARGUMENTS:
#
#     -v --verbosity
#
#     -d --database dbName
#     -N --NEW
#     -S --STATUS
#     -D --DUMP
#     -L --L2NORM
#
#     -f --features features.bin 
#     -k --key key
#     -t --timePoints.txt
#     -I --INSERT 
#     -U --UPDATE
#
#     -F --featureList featureList.txt 
#     -K --keyList keyList.txt
#     -T --timePointsList.txt
#     -B --BATCHINSERT dbName
#
#     -Q --QUERY {point|track|sequence} 
#     -p --qpoint - ordinal position of query vector in feature input file
#     -n --pointnn n  - number of nearest neigbour points per track
#     -r --resultlength n - number of tracks (nearest neighbours) to return
#     -l --seqlen len - length of sequence
#     -h --seqhop hop - hop size of sequence
#     -R --radius - radius-based search, return all points/tracks/sequences < radius (0...Inf)
#     -x --x - time expand (compress) factor (ratio of result length to query length (and visa-versa)) [1..Inf]
#     -o --rotate - rotate the query feature vectors on search
#
#     -s --SERVER port
#     -c --client host:port

package "audioDB"
version "version 1.0"
purpose "A feature vector database management system for content-based retrieval."
option "help" H "print help on audioDB usage and exit." optional
option "verbosity" v "level of detail of operational information." int typestr="detail" default="1" optional
text "\nDatabase commands are UPPER CASE. Command options are lower case.\n" 
text ""
section "Database Setup" sectiondesc="All database operations require a database argument."

option "database" d "database file required by Database commands." string typestr="filename" optional
option "NEW"    N "make a new (initially empty) database." dependon="database" optional
option "STATUS" S "output database information to stdout." dependon="database" optional
option "DUMP"   D "output all entries: index key size." dependon="database" optional
option "L2NORM" L "unit norm vectors and norm all future inserts." dependon="database" optional
section "Database Insertion" sectiondesc="The following commands insert feature files, with optional keys and timestamps.\n"
option "INSERT"      I "add feature vectors to an existing database." dependon="features" optional
option "UPDATE"      U "replace inserted vectors associated with key with new input vectors." dependon="features" dependon="key" dependon="database" optional hidden
option "features" f "binary series of vectors file {int sz:ieee double[][sz]:eof}." string typestr="filename" dependon="database" optional
option "times"    t "list of time points (ascii) for feature vectors." string typestr="filename" dependon="features" optional
option "key"      k "unique identifier associated with features." string typestr="identifier" dependon="features" optional
text ""
option "BATCHINSERT" B "add feature vectors named in a --featureList file (with optional keys in a --keyList file) to the named database." dependon="featureList" optional
option "featureList" F "text file containing list of binary feature vector files to process, one per track" string typestr="filename" dependon="database" optional
option "timesList"   T "text file containing list of ascii --times for each --features file in --featureList." string typestr="filename" dependon="featureList" optional
option "keyList"     K "text file containing list of unique identifiers associated with --features." string typestr="filename" optional


section "Database Search" sectiondesc="Thse commands control the retrieval behaviour.\n"

option "QUERY" Q "content-based search on --database using --features as a query. Optionally restrict the search to those tracks identified in a --keyList." values="point","track","sequence" typestr="searchtype" dependon="database" dependon="features" optional
option "qpoint" p "ordinal position of query start point in --features file." int typestr="position" default="0" optional
option "exhaustive" e "exhaustive search: iterate through all query vectors in search. Overrides --qpoint." flag off optional hidden
option "pointnn" n "number of point nearest neighbours to use in retrieval." int typestr="numpoints" default="10" optional
option "radius"  R "radius search, returns all points/tracks/sequences inside given radius." double default="1.0" optional hidden
option "expandfactor" x "time compress/expand factor of result length to query length [1.0 .. 100.0]." double default="1.1" optional hidden
option "rotate"       o "rotate query vectors for rotationally invariant search." flag off optional hidden
option "resultlength" r "maximum length of the result list." int typestr="length" default="10" optional
option "sequencelength" l "length of sequences for sequence search." int typestr="length" default="16" dependon="QUERY" optional
option "sequencehop"  h "hop size of sequence window for sequence search." int typestr="hop" default="1" dependon="QUERY" optional

section "Web Services" sectiondesc="These commands enable the database process to establish a connection via the internet and operate as separate client and server processes.\n"
option "SERVER" s "run as standalone web service on named port." int typestr="port" default="80011" optional
option "client" c "run as a client using named host service." string typestr="hostname:port" optional


text "\nCopyright (C) 2007 Michael Casey, Goldsmiths, University of London\n"


